# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param root, a tree node
    # @return an integer
    def maxPathSumHelp(self, root):
        if root is None:
            return None
        if root.left is None and root.right is None:
            a, b = root.val, root.val
        elif root.left is None:
            right = self.maxPathSumHelp(root.right)
            b = max(root.val + right[1], root.val)
            a = max(b, right[0])
        elif root.right is None:
            left = self.maxPathSumHelp(root.left)
            b = max(root.val + left[1], root.val)
            a = max(b, left[0])
        else:
            left, right = self.maxPathSumHelp(root.left), self.maxPathSumHelp(root.right)
            b = root.val + max(left[1], right[1])
            b = max(b, root.val)
            a = max(max(left[0], right[0]), left[1] + root.val + right[1])
            a = max(b, max(root.val, a))
        return [a, b]
    
    def maxPathSum(self, root):
        if root is None:
            return 0
        else:
            return self.maxPathSumHelp(root)[0]
