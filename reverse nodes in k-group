# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param head, a ListNode
    # @param k, an integer
    # @return a ListNode
    def reverseKGroup(self, head, k):
        if k == 1:
            return head
        s, h, i, t = k * [None], None, 0, head
        tail = None
        while t is not None:
            s[i%k] = t
            t = t.next
            i += 1
            if i % k == 0:
                j = k
                if tail is not None:
                    tail.next = s[k-1]
                else:
                    h = s[k-1]
                while j > 1:
                    s[j-1].next = s[j-2]
                    j -= 1
                tail = s[0]
        if tail is not None:
            if i % k == 0:
                tail.next = None
            else:
                tail.next = s[0]
        else:
            h = s[0]
        return h
